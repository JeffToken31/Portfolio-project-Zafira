generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(uuid())
  email              String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  emailVerified      Boolean             @default(false)
  firstName          String?
  lastName           String?
  role               Role                @default(BENEFICIARY)
  credentials        Credential[]
  emailTokens        EmailVerification[]
  verificationTokens VerificationToken[]
}

model Credential {
  id        String              @id @default(uuid())
  userId    String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  user      User                @relation(fields: [userId], references: [id])
  google    GoogleCredential?
  password  PasswordCredential?
}

model PasswordCredential {
  id           String     @id @default(uuid())
  credentialId String     @unique
  passwordHash String
  credential   Credential @relation(fields: [credentialId], references: [id])
}

model GoogleCredential {
  id              String     @id @default(uuid())
  credentialId    String     @unique
  googleSub       String     @unique
  googleEmail     String
  googleFirstName String?
  googleLastName  String?
  googleAvatarUrl String?
  credential      Credential @relation(fields: [credentialId], references: [id])
}

model EmailVerification {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  BENEFICIARY
}

model Blog {
  id            String    @id @default(uuid())
  title         String    @unique
  slug          String    @unique
  content       String
  excerpt       String
  coverImageUrl String?
  mediaUrl      String?
  mediaType     MediaType?
  published     Boolean   @default(false)
  publishedAt   DateTime?
}

enum MediaType {
  IMAGE
  VIDEO
}

model Action {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String?
  published   Boolean  @default(false)
  publishedAt DateTime?
}

model Partner {
  id           String   @id @default(uuid())
  companyName  String   @unique
  name         String?
  email        String?
  phoneNumber  String?
  logoUrl      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Testimonial {
  id             String   @id @default(uuid())
  authorName     String
  content        String
  beneficiaryId  String?
  validated      Boolean  @default(false)
  published      Boolean  @default(false)
  publishedAt    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ManualStatistic {
  id            String                 @id @default(uuid())
  type          ManualStatisticType    @unique
  totalQuantity Int                    @default(0)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  entries       ManualStatisticEntry[]
}

model ManualStatisticEntry {
  id                String      @id @default(uuid())
  quantity          Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  manualStatistic   ManualStatistic @relation(fields: [manualStatisticId], references: [id])
  manualStatisticId String
}

enum ManualStatisticType {
  BENEFICIARIES
  CLOTHES_KG
  WORKSHOPS
}

model DailyVisit {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MonthlyVisit {
  id        Int      @id @default(autoincrement())
  month     String   @unique
  total     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stats {
  id            Int @id @default(1)
  totalVisitors Int @default(0)
}

model Activity {
  id          String   @id @default(uuid())
  type        ActivityType
  title       String
  description String?
  createdAt   DateTime @default(now())
}

enum ActivityType {
  USER_REGISTERED
  TESTIMONIAL_SUBMITTED
  BLOG_PUBLISHED
  PARTNER_ADDED
  ACTION_PUBLISHED
}
